task testA

testA.doLast {
    println "============ START =============="
    def foo = 6.5
    println "foo has value: $foo"

    println "Let's do some math. 5 + 6 = ${5 + 6}"

    println "foo is of type: ${foo.class} and has value: $foo"
    foo = "a string"
    println "foo is now of type: ${foo.class} and has value: $foo"


    println "---------------------------------"



    foo = 5
    println "doubleIt($foo) = ${doubleIt(foo)}"

    foo = "foobar"
    println "doubleIt($foo) = ${doubleIt(foo)}"

    println "---------------------------------"

    oneArg 500 // Look, Ma! No parentheses!
    twoArgs 200, 300
    noArgs()
    //noArgs // Doesn't work
    //twoArgs oneArg 500, 200 // Also doesn't work as it's ambiguous
    twoArgs oneArg(500), 200 // Fixed the ambiguity

    println "---------------------------------"

    def doubleIt = { x -> x + x }

    println doubleIt(2)

    foo = 5
    def fooDoubledTwice = applyTwice(doubleIt, foo)

    println "Applying doubleIt twice to $foo equals $fooDoubledTwice"

    println "---------------------------------"

    def myList = ["Gradle", "Groovy", "Android"]
    def printItem = { item -> println "List item: $item" }

    myList.each(printItem)

    myList.each { println "Compactly printing each list item: $it" }

    println "---------------------------------"

    def myGroovyGreeter = new GroovyGreeter()

    myGroovyGreeter.printGreeting()
    myGroovyGreeter.greeting = "My custom greeting"
    myGroovyGreeter.printGreeting()

    def greetingClosure = {
        greeting = "Setting the greeting from a closure"
        printGreeting()
    }

    // greetingClosure() // This doesn't work, because `greeting` isn't defined
    greetingClosure.delegate = myGroovyGreeter
    greetingClosure() // This works as `greeting` is a property of the delegate


    println "============= END ==============="
}

def doubleIt(n) {
    n + n // Note we don't need a return statement
}

def noArgs() {
    println "Called the no args function"
}

def oneArg(x) {
    println "Called the 1 arg function with $x"
    x
}

def twoArgs(x, y) {
    println "Called the 2 arg function with $x and $y"
    x + y
}

def applyTwice(func, arg) {
    func(func(arg))
}

class GroovyGreeter {
    String greeting = "Default greeting"

    def printGreeting() { println "Greeting: $greeting" }
}

